<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>番茄の博客</title>
  
  <subtitle>利器完不成的工作，钝器常能派上用场。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linyong05.github.io/"/>
  <updated>2018-05-07T07:33:26.394Z</updated>
  <id>https://linyong05.github.io/</id>
  
  <author>
    <name>LinYong05</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue之axios的简单封装及使用</title>
    <link href="https://linyong05.github.io/2018/05/07/vue%E4%B9%8Baxios%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://linyong05.github.io/2018/05/07/vue之axios的简单封装及使用/</id>
    <published>2018-05-07T06:46:40.000Z</published>
    <updated>2018-05-07T07:33:26.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue之axios的简单封装及使用"><a href="#vue之axios的简单封装及使用" class="headerlink" title="vue之axios的简单封装及使用"></a>vue之axios的简单封装及使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios,axios和其他的ajax库都是很类似的，提供了2种使用的方式,都可以简单的调用。其实网上及官方都有很多说明及例子，也很简单的就能学习到如何运用，这里我就不一一说明了。我这里主要记录一个参考了很多的例子及自己常用的封装方法。</p><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><blockquote><p><code>axios</code> 主要针对vue脚手架搭建，直接在命令行中运行</p></blockquote><blockquote><p><code>npm install axios --save</code></p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/07/vue之axios的简单封装及使用/axios.png" alt="我的目录结构" title="">                </div>                <div class="image-caption">我的目录结构</div>            </figure><p>在<code>src</code>文件夹下创建一个<code>api</code>文件夹，然后分别创建三个JS文件：<br><code>config.js</code>:用来配置公共参数的文件,<br><code>fetch.js</code>：axios配置参数相关文件,<br><code>index.js</code>：入口文件</p><h2 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h2><ul><li>首先配置接口需要的公共参数，在<code>config.js</code>中配置，大致如下：</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DEV_HOST = <span class="string">'接口域名'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = &#123;</span><br><span class="line">   公共参数<span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">   公共参数<span class="number">2</span>: <span class="number">2</span>,</span><br><span class="line">   公共参数<span class="number">3</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  code: code,</span><br><span class="line">  DEV_HOST: DEV_HOST</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>然后配置axios参数并引入公共参数，在<code>fetch.js</code>中配置，大致如下：</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DEV_HOST &#125; <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="comment">// 设置默认根地址</span></span><br><span class="line">  baseURL: DEV_HOST,</span><br><span class="line">  <span class="comment">// 设置请求超时设置</span></span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">  <span class="comment">// 设置请求时的header</span></span><br><span class="line">  header: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 公用参数</span></span><br><span class="line">  data: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST传参序列化</span></span><br><span class="line">instance.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//console.log(config)</span></span><br><span class="line">  <span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</span><br><span class="line">    config.data = qs.stringify(config.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回状态判断</span></span><br><span class="line">instance.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.data.code == <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"接口请求超时或者错误"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(options).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(response.data)</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>最后在入口文件<code>index.js</code>中写好接口地址，供使用时调用,大致如下：</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'./fetch'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> 接口<span class="number">1</span>命名 = <span class="function">(<span class="params">data</span>) =&gt;</span> fetch(&#123; <span class="attr">url</span>: <span class="string">'接口1地址'</span>, <span class="attr">method</span>: <span class="string">'POST'</span>, data &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> 接口<span class="number">2</span>命名 = <span class="function">(<span class="params">data</span>) =&gt;</span> fetch(&#123; <span class="attr">url</span>: <span class="string">'接口2地址'</span>, <span class="attr">method</span>: <span class="string">'POST'</span>, data &#125;);</span><br></pre></td></tr></table></figure></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>使用时，在需要调用接口的页面中，调用接口1命名，并在<code>method</code>中调用<code>fetch</code>方法，代码大致如下：</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; 接口<span class="number">1</span>命名 &#125; <span class="keyword">from</span> <span class="string">"@/api"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      参数<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    click() &#123;</span><br><span class="line">      接口<span class="number">1</span>命名(参数<span class="number">1</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这就是我常用的axios的使用方法，用习惯了，就觉得应该来记录一下。其他如果项目简单的话，并不需要在<code>fetch</code>中写那么多的参数。直接调用<code>post</code>及<code>get</code>方法，在<code>fetch</code>中直接全部替换以下代码使用即可：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  post(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      instance(&#123;</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        url,</span><br><span class="line">        data: params,</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(response.data)</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  get(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      instance(&#123;</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        url,</span><br><span class="line">        params: params,</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(response.data)</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>希望自己的记录对大家有帮助，欢迎指教与参与讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue之axios的简单封装及使用&quot;&gt;&lt;a href=&quot;#vue之axios的简单封装及使用&quot; class=&quot;headerlink&quot; title=&quot;vue之axios的简单封装及使用&quot;&gt;&lt;/a&gt;vue之axios的简单封装及使用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="方法" scheme="https://linyong05.github.io/categories/%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="vue" scheme="https://linyong05.github.io/tags/vue/"/>
    
      <category term="axios" scheme="https://linyong05.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>vue之HTML转为PDF并预览的实现与踩坑过程</title>
    <link href="https://linyong05.github.io/2018/04/23/vue%E4%B9%8BHTML%E8%BD%AC%E4%B8%BAPDF%E5%B9%B6%E9%A2%84%E8%A7%88%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B/"/>
    <id>https://linyong05.github.io/2018/04/23/vue之HTML转为PDF并预览的实现与踩坑过程/</id>
    <published>2018-04-23T09:29:12.000Z</published>
    <updated>2018-04-26T08:32:35.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue之HTML转为PDF并预览的实现与踩坑过程"><a href="#vue之HTML转为PDF并预览的实现与踩坑过程" class="headerlink" title="vue之HTML转为PDF并预览的实现与踩坑过程"></a>vue之HTML转为PDF并预览的实现与踩坑过程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>产品的话能不听吗？产品：”我觉得我们的后台需要一份导出功能，普通的word、excel导出不适用，导出来的数据容易误操作，还容易被修改。不理想,我就需要一份PDF导出格式,你们去实现一下。。。”</p><p>好吧，产品的话只能听啊，那就去实现吧。虽然平时没做过PDF导出，但至少也还在度娘在啊。搜索一番并历经几个小坑，终于是实现较理想的状态。以下听我来细细讲解一番。此次分享以VUE项目为主，也许网上也有很多的教程，但是自己亲身经历的还是有意义的。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ol><li><code>jspdf</code>  项目地址：<a href="https://github.com/MrRio/jsPDF" target="_blank" rel="noopener">https://github.com/MrRio/jsPDF</a></li><li><code>html2canvas</code> 项目地址：<a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">https://github.com/niklasvh/html2canvas</a></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><code>jspdf</code> 直接在命令行中运行npm install jspdf –save</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/04/23/vue之HTML转为PDF并预览的实现与踩坑过程/npmi.png" alt="命令行中运行" title="">                </div>                <div class="image-caption">命令行中运行</div>            </figure><blockquote><p><code>html2canvas</code> 不要用Github文档的npm安装的方式，直接下载文件放入文件夹。如图：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/04/23/vue之HTML转为PDF并预览的实现与踩坑过程/download.png" alt="下载入口" title="">                </div>                <div class="image-caption">下载入口</div>            </figure><ul><li>Github文档有npm安装的方式,不过安装下来是5.0以上版本的预发行版本（这也是我没注意遇到的大坑，版本下载错了，以下方法都实现不了哦），所以不要直接用，我们去下载最新发布的版本0.4.1。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/04/23/vue之HTML转为PDF并预览的实现与踩坑过程/html2canvas.png" alt="最新版本" title="">                </div>                <div class="image-caption">最新版本</div>            </figure><ul><li>将下载完的html2canvas.js放在项目的指定位置中供后面使用来调用，这个位置可根据你的项目自行选择,下图是我所放的位置。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/04/23/vue之HTML转为PDF并预览的实现与踩坑过程/html2canvas2.png" alt="放到项目指定位置" title="">                </div>                <div class="image-caption">放到项目指定位置</div>            </figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>HTML转为PDF并预览的方法其实有很多很多，我介绍的这个HTML转为PDF并预览主要针对转换需求少的，不能实现批量，目前我是没看到有啥可以实现批量转换的，有好的方法也希望大家告知，我的实现过程主要是，打开需要转为PDF的页面，然后再点击转为PDF的按钮，通过ifranme展示转换好的PDF，用户可以通过当前的页面自行选择是否需要下载PDF。</p><h3 id="第一步，引用"><a href="#第一步，引用" class="headerlink" title="第一步，引用"></a>第一步，引用</h3><ul><li>需要转为PDF的页面的<code>script</code>中引用</li></ul><blockquote><p>import jsPDF from ‘jspdf’<br>  import html2canvas from ‘../../../assets/js/html2canvas.js’</p></blockquote><h3 id="第二步，写页面布局（即需要打印的页面）"><a href="#第二步，写页面布局（即需要打印的页面）" class="headerlink" title="第二步，写页面布局（即需要打印的页面）"></a>第二步，写页面布局（即需要打印的页面）</h3><ul><li>页面上需要一个布局作为转换页面的模板，还需要一个iframe来展示转换后的PDF预览结果，期间转换后通过隐藏模板显示预览来完成。在<code>template</code>内的基本布局如下。</li></ul><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"!pdfShow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"LoadPDF"</span>&gt;</span>预览PDF<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pdfdiv"</span> <span class="attr">class</span>=<span class="string">"pdfbg"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是需要打印的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img.alicdn.com/bao/uploaded/TB1qimQIpXXXXXbXFXXSutbFXXX.jpg"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">scrolpng</span>=<span class="string">"no"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">v-show</span>=<span class="string">"pdfShow"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="第三步，写按钮方法"><a href="#第三步，写按钮方法" class="headerlink" title="第三步，写按钮方法"></a>第三步，写按钮方法</h3><ul><li><p>因为需要显示隐藏控制，我们需要双向绑定一个<code>pdfShow</code>,然后写一个按钮的点击事件<code>LoadPDF()</code>。</p></li><li><p><code>data()</code>中<code>return</code>一个<code>pdfShow</code>，默认不显示PDF：</p></li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        pdfShow: <span class="literal">false</span> <span class="comment">//默认不显示PDF预览ifranme</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>methods</code>中添加一个<code>LoadPDF()</code>为按钮的点击事件：</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    LoadPDF() &#123;</span><br><span class="line">        <span class="keyword">var</span> pdf = <span class="keyword">new</span> jsPDF();</span><br><span class="line">        pdf.internal.scaleFactor = <span class="number">8</span>; <span class="comment">//可以调整缩放比例</span></span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">            pagesplit: <span class="literal">true</span>, <span class="comment">//分页</span></span><br><span class="line">            <span class="string">"background"</span>: <span class="string">'#FFFFFF'</span> <span class="comment">//设置背景色</span></span><br><span class="line">        &#125;;</span><br><span class="line">        pdf.addHTML(<span class="built_in">document</span>.querySelector(<span class="string">'#pdfdiv'</span>), options, () =&gt; &#123;</span><br><span class="line">            pdf.setProperties(&#123;</span><br><span class="line">                title: <span class="string">'PDF预览'</span> <span class="comment">//设置PDF标题</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"iframe"</span>).src = pdf.output(<span class="string">'datauristring'</span>); <span class="comment">//在iframe中显示</span></span><br><span class="line">            <span class="keyword">this</span>.pdfShow = <span class="literal">true</span> <span class="comment">//显示PDF预览</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>到此其实基本上已经实现了PDF预览功能了，但是呢，还是有些小坑的，就比如你完完全全的按我这个步骤做下来是绝对会遇到坑的。接下来我就来介绍下所遇到的坑并如何爬过这些坑。</li></ul><h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><p>此方法坑有三处</p><blockquote><ul><li>1.生成PDF可能会出现可能会出现黑色区域一大片。实际PDF转换是成功的，原因在于你的页面要转换区域没有背景样式，需要加个白色背景，如我的<code>class</code>名为<code>pdfbg</code>,设置为:<code>background:&quot;#FFFFFF&quot;;</code></li></ul></blockquote><blockquote><ul><li>2.可能生成的PDF位置偏移或者文字变形，那是由于项目设置的单位不同，可以先尝试修改<code>pdf.internal.scaleFactor = 8;</code>调整缩放比例来调整到最佳显示。</li></ul></blockquote><blockquote><ul><li>3.页面中存在图片转换不显示图片的问题，原因是网络图片存在跨域等问题，解决方案是将图片转换为base64即可。通过修改<code>img</code>中的图片地址的<code>&lt;img :src=&quot;FormatImg(https://img.alicdn.com/bao/uploaded/TB1qimQIpXXXXXbXFXXSutbFXXX.jpg)&quot; width=&quot;100&quot; height=&quot;auto&quot;&gt;</code>传入<code>FormatImg(url)</code>即可(vue中需要用到<code>:src</code>绑定)。方法以下贴出（这是针对单张图片的方法，可自行修改多张）：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    getBase64Image(img) &#123;</span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">        canvas.width = img.width;</span><br><span class="line">        canvas.height = img.height;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">        ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</span><br><span class="line">        <span class="keyword">var</span> ext = img.src.substring(img.src.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line">        <span class="keyword">var</span> dataURL = canvas.toDataURL(<span class="string">"image/"</span> + ext);</span><br><span class="line">        <span class="keyword">return</span> dataURL;</span><br><span class="line">    &#125;,</span><br><span class="line">    FormatImg(url) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">var</span> img = url</span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.crossOrigin = <span class="string">''</span>;</span><br><span class="line">        image.src = img;</span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            _this.baseimg = _this.getBase64Image(image);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _this.baseimg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="vue之HTML转为PDF第二种方法-跳过预览下载PDF"><a href="#vue之HTML转为PDF第二种方法-跳过预览下载PDF" class="headerlink" title="vue之HTML转为PDF第二种方法(跳过预览下载PDF)"></a>vue之HTML转为PDF第二种方法(跳过预览下载PDF)</h1><p>第二种方法我也是网上看到的，只是小试了下，其实原理差不多，具体的不详细介绍，也并未认真的去修改配置。这里也贴出代码，有需要的自己试下。</p><ol><li><code>jspdf</code>  项目地址：<a href="https://github.com/MrRio/jsPDF" target="_blank" rel="noopener">https://github.com/MrRio/jsPDF</a></li><li><code>html2canvas</code> 项目地址：<a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">https://github.com/niklasvh/html2canvas</a></li></ol><blockquote><p><code>jspdf</code> 直接在命令行中运行npm install jspdf –save<br><code>html2canvas</code> 这个方法试用的版本是<code>v0.5.0-beta4</code>，下载方法前面有介绍。别下载错了哦。</p></blockquote><p>代码方法如下（其他问题可前后结合试试，我就不试啦。）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    LoadPDF() &#123;</span><br><span class="line">        <span class="keyword">var</span> target = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"pdfbg"</span>)[<span class="number">0</span>]; <span class="comment">//需要打印的区域</span></span><br><span class="line">        target.style.background = <span class="string">"#FFFFFF"</span>;   <span class="comment">//设置背景色，已设置可跳过</span></span><br><span class="line">        html2canvas(target, &#123;</span><br><span class="line">            onrendered:<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> contentWidth = canvas.width;</span><br><span class="line">            <span class="keyword">var</span> contentHeight = canvas.height;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//一页pdf显示html页面生成的canvas高度;</span></span><br><span class="line">            <span class="keyword">var</span> pageHeight = contentWidth / <span class="number">592.28</span> * <span class="number">841.89</span>;</span><br><span class="line">            <span class="comment">//未生成pdf的html页面高度</span></span><br><span class="line">            <span class="keyword">var</span> leftHeight = contentHeight;</span><br><span class="line">            <span class="comment">//页面偏移</span></span><br><span class="line">            <span class="keyword">var</span> position = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高</span></span><br><span class="line">            <span class="keyword">var</span> imgWidth = <span class="number">595.28</span>;</span><br><span class="line">            <span class="keyword">var</span> imgHeight = <span class="number">592.28</span>/contentWidth * contentHeight;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> pageData = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> pdf = <span class="keyword">new</span> jsPDF(<span class="string">''</span>, <span class="string">'pt'</span>, <span class="string">'a4'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)</span></span><br><span class="line">            <span class="comment">//当内容未超过pdf一页显示的范围，无需分页</span></span><br><span class="line">            <span class="keyword">if</span> (leftHeight &lt; pageHeight) &#123;</span><br><span class="line">            pdf.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(leftHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pdf.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">0</span>, position, imgWidth, imgHeight)</span><br><span class="line">                    leftHeight -= pageHeight;</span><br><span class="line">                    position -= <span class="number">841.89</span>;</span><br><span class="line">                    <span class="comment">//避免添加空白页</span></span><br><span class="line">                    <span class="keyword">if</span>(leftHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                      pdf.addPage();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pdf.save(<span class="string">"save.pdf"</span>); <span class="comment">//保存PDF</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML转PDF，总体来说，我觉得只适合页面内容较少的，过多了效果并不是很理想，也许是我的方式不对吧。如果有其他方法或者不对的地方，欢迎留言指教。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue之HTML转为PDF并预览的实现与踩坑过程&quot;&gt;&lt;a href=&quot;#vue之HTML转为PDF并预览的实现与踩坑过程&quot; class=&quot;headerlink&quot; title=&quot;vue之HTML转为PDF并预览的实现与踩坑过程&quot;&gt;&lt;/a&gt;vue之HTML转为PDF并
      
    
    </summary>
    
      <category term="方法" scheme="https://linyong05.github.io/categories/%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="vue" scheme="https://linyong05.github.io/tags/vue/"/>
    
      <category term="JS" scheme="https://linyong05.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Tomato Music——移动端音乐 WebApp</title>
    <link href="https://linyong05.github.io/2018/04/18/TomatoMusic/"/>
    <id>https://linyong05.github.io/2018/04/18/TomatoMusic/</id>
    <published>2018-04-18T07:11:41.000Z</published>
    <updated>2018-04-18T07:18:49.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomato-Music——移动端音乐-WebApp"><a href="#Tomato-Music——移动端音乐-WebApp" class="headerlink" title="Tomato Music——移动端音乐 WebApp"></a>Tomato Music——移动端音乐 WebApp</h1><p>👉 github: <a href="https://github.com/LinYong05/vue-music-webapp" target="_blank" rel="noopener">https://github.com/LinYong05/vue-music-webapp</a></p><p>👉  项目演示地址(接口可能会因为QQ音乐变动导致数据获取失败): <a href="https://linyong05.github.io/vue-music-webapp/dist/#/recommend">https://linyong05.github.io/vue-music-webapp/dist/#/recommend</a> （在 GitHub Pages 中，通过 jsonp 请求的数据会被正常渲染，而由于无 node 服务，通过 axios 请求的数据不会被正常渲染,最主要表现为首页推荐列表、歌词加载不来。）</p><p>基于 <strong>Vue 全家桶 (2.x)</strong> 制作的移动端音乐 WebApp ，一个媲美原生的移动端音乐App项目，功能完备，UI美观，交互一流</p><h2 id="技术储备要求"><a href="#技术储备要求" class="headerlink" title="技术储备要求"></a>技术储备要求</h2><ul><li>1、精通HTML、 CSS和JavaScript编程</li><li>2、有了一定Vue.js 基础和Vue.js的实际开发经验</li><li>3、已经具备Node.js、npm和webpack的使用经验</li></ul><h2 id="学习知识点（前端）"><a href="#学习知识点（前端）" class="headerlink" title="学习知识点（前端）"></a>学习知识点（前端）</h2><ul><li><code>Vue</code>：数据绑定及全新的逻辑体验</li><li><code>vue-router</code>：为单页面应用提供的路由系统</li><li><code>vuex</code>：Vue 集中状态管理，有点像临时共享仓库</li><li><code>vue-lazyload</code>：第三方图片懒加载库，优化页面加载速度</li><li><code>better-scroll</code>：滚动插件</li><li><code>ES6</code>：ECMAScript 新一代语法，模块化、解构赋值、Promise、Class 是新的知识点</li></ul><h2 id="学习知识点（后端）"><a href="#学习知识点（后端）" class="headerlink" title="学习知识点（后端）"></a>学习知识点（后端）</h2><ul><li><code>Node.js</code>：本地测试服务器，基于node.js开发vue项目</li><li><code>jsonp</code>：服务端数据通讯。抓取 QQ音乐(移动端)数据来实现音乐的数据的获取</li><li><code>axios</code>：服务端数据请求。结合 Node.js 代理后端请求，抓取 QQ音乐(PC端)数据</li></ul><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><li>收获了一套 Vue 通用组件，可以在其它项目中复用的 10+ 个基础组件、15+ 个业务组件</li><li>收获了一套常用的 SCSS mixin 库</li><li>体会到组件化、模块化开发带来的便捷</li><li>体会到将对象封装成类(ES6 class) 的便捷性，以及利用工厂方式初始化类实例</li><li>学会利用 <code>js</code> 编写过渡效果及动画效果制作良好的用户交互体验</li><li>学会了vue开发思想逻辑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomato-Music——移动端音乐-WebApp&quot;&gt;&lt;a href=&quot;#Tomato-Music——移动端音乐-WebApp&quot; class=&quot;headerlink&quot; title=&quot;Tomato Music——移动端音乐 WebApp&quot;&gt;&lt;/a&gt;Tomato M
      
    
    </summary>
    
      <category term="练习" scheme="https://linyong05.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="https://linyong05.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue笔记</title>
    <link href="https://linyong05.github.io/2018/04/17/vue%E7%AC%94%E8%AE%B0/"/>
    <id>https://linyong05.github.io/2018/04/17/vue笔记/</id>
    <published>2018-04-17T02:58:44.000Z</published>
    <updated>2018-05-16T06:47:04.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我第一次学习vue时整理的一些简单的笔记。同时也是我建立这个个人博客的第一篇文章。借此分享也便以后查阅，欢迎纠正与指导。</p><h2 id="vue目录结构说明"><a href="#vue目录结构说明" class="headerlink" title="vue目录结构说明"></a>vue目录结构说明</h2><p><code>1.build:</code> 项目构建webpack相关代码。</p><p><code>2.config:</code> 配置目录，包括端口号等。</p><p><code>3.node_modules:</code> npm加载的项目依赖模块。</p><p><code>4.src:</code> 这里是我们要开发的目录，基本上要做的事情都在这个目录里。</p><p><code>5.static:</code> 静态资源目录:如图片、字体等。</p><p><code>6.package.json:</code> 项目配置文件，这个用于控制项目的依赖。使用npm加载依赖时，会按照这个文件里描述的依赖及版本进行下载。</p><p><code>7.index.html:</code> 项目入口文件</p><p><code>8.static/.gitkeep:</code> 这个文件保证这个文件夹在上传到github的时候会始终存在。因为github本身会忽略掉空文件夹。</p><p><code>9..babelrc:</code> babel语法编译器的编译配置</p><p><code>10..eslintignore:</code> 忽略语法检查的目录</p><p><code>11.eslintrc.js:</code> 语法检查eslint的配置文件</p><p><code>12.gitignore:</code> 配置一些不需要上传到github的文件或者目录</p><p><code>13.README.md:</code> 项目的描述文件</p><h2 id="vue重要的指令"><a href="#vue重要的指令" class="headerlink" title="vue重要的指令"></a>vue重要的指令</h2><p>vue对象里的设置通过html指令进行关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v-text:    渲染字符串文本数据</span><br><span class="line">v-html:    渲染普通的html代码插入</span><br><span class="line">v-show:    切换元素的display属性（显示/隐藏）</span><br><span class="line">v-if:      按条件渲染~（删除页面中的代码/插入一段代码）</span><br><span class="line">v-else:    前一兄弟元素必须有 v-if 或 v-else-if</span><br><span class="line">v-else-if: 前一兄弟元素必须有 v-if 或 v-else-if</span><br><span class="line">v-for:     循环渲染，有相同父元素的子元素最好加个独特的 key</span><br><span class="line">v-on:      绑定事件，缩写 @ </span><br><span class="line">v-bind:    动态地绑定一个或多个特性（src、class、style等），缩写 :</span><br><span class="line">v-model:   表单控件或组建上创建双向绑定</span><br><span class="line">v-pre:     跳过这个元素和它的子元素的编译过程</span><br><span class="line">v-cloak:   这个指令保持在元素上直到关联实例结束编译，防止闪烁</span><br><span class="line">v-once:    只渲染元素和组件一次，随后的重新渲染将跳过，这可以用于优化更新性能。</span><br></pre></td></tr></table></figure><h2 id="vue对象属性说明"><a href="#vue对象属性说明" class="headerlink" title="vue对象属性说明"></a>vue对象属性说明</h2><p>new 一个vue对象的时候你可以设置它的属性，其中最重要的包括三个，分别是data、methods、watch.</p><blockquote><ul><li><code>data</code>代表vue对象的数据</li><li><code>methods</code>代表vue对象的方法</li><li><code>watch</code>设置了对象监听的方法</li><li><code>mounted</code>页面初始化默认方法,$el挂载到实例上去之后调用该钩子</li><li><code>computed</code>实时计算</li><li><code>created</code>在实例创建完成后被立即调用,挂载阶段还没开始，$el 属性目前不可见。</li></ul></blockquote><h2 id="vuex状态管理"><a href="#vuex状态管理" class="headerlink" title="vuex状态管理"></a>vuex状态管理</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br>目录结构：<br>store:<br>&nbsp;&nbsp;&nbsp;&nbsp;1.action.js &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;异步修改操作<br>&nbsp;&nbsp;&nbsp;&nbsp;2.getters.js &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第四步：取数据到组件<br>&nbsp;&nbsp;&nbsp;&nbsp;3.index.js &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;入口文件<br>&nbsp;&nbsp;&nbsp;&nbsp;4.mutation-type.js &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二步：设置常量方法<br>&nbsp;&nbsp;&nbsp;&nbsp;5.mutation.js &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三步：定义修改操作<br>&nbsp;&nbsp;&nbsp;&nbsp;6.state.js &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一步：定义状态树</p><h2 id="vue学习过程中一些其他技巧或插件"><a href="#vue学习过程中一些其他技巧或插件" class="headerlink" title="vue学习过程中一些其他技巧或插件"></a>vue学习过程中一些其他技巧或插件</h2><h3 id="自定义路径别名"><a href="#自定义路径别名" class="headerlink" title="自定义路径别名"></a>自定义路径别名</h3><p>在buidl文件夹下找到webpack.base.config.js文件根据自己需求修改</p><blockquote><p>resolve:{<br>&nbsp;&nbsp;&nbsp;&nbsp;extensions: [‘.js’, ‘.vue’, ‘.json’],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;’vue$’: ‘vue/dist/vue.esm.js’,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;‘@’: resolve(‘src’),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;’common’: resolve(‘src/common’),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;’components’: resolve(‘src/components’),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;’base’: resolve(‘src/base’),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;’api’: resolve(‘src/api’)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</p></blockquote><h3 id="tag转换制定标签类型"><a href="#tag转换制定标签类型" class="headerlink" title="tag转换制定标签类型"></a>tag转换制定标签类型</h3><blockquote><p><code>&lt;router-link tag=&quot;div&quot; to=&quot;/xxx&quot;&gt;</code></p></blockquote><p>将默认为a标签的路由导航指派为div。</p><h3 id="路由器技巧"><a href="#路由器技巧" class="headerlink" title="路由器技巧"></a>路由器技巧</h3><p>运行项目时需要默认打开某个路由指向时，可设置</p><blockquote><p>{<br>&nbsp;&nbsp;&nbsp;&nbsp;path: ‘/‘,<br>&nbsp;&nbsp;&nbsp;&nbsp;redirect: ‘/index’<br>}</p></blockquote><h3 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h3><ul><li>vue组件之间的调用另一个重要选项<code>components</code></li><li>vue组件之间的通信<code>props</code></li><li>功能模块：select、pagenation……</li><li>页面区域：header、footer、sidebar……</li><li>class首字母大写（compenents）</li><li><code>&lt;solt&gt;&lt;/solt&gt;</code>vue的一个插槽</li><li><code>activated</code> <code>keep-alive</code>组件激活时调用。当引入<code>keep-alive</code>的时候，页面第一次进入，钩子的出发顺序<code>created</code> &gt; <code>mounted</code> &gt; <code>activated</code>,退出时触发<code>deactivated</code>。当再次进入（前进或者后退）时，只触发<code>activated</code>。<code>keep-alive</code>只有当数据变化时，才使用更新。故，页面进入的数据获取应该在activated中也放一份。数据下载完毕手动操作DOM的部分也应该在activated中执行才会生效。</li><li>样式：<br>flex布局 align-items:center 垂直居中<br>flex纵向排列 flex-direction:column;justify-content:center 纵向居中</li><li>图片懒加载：<a href="https://www.npmjs.com/package/vue-lazyload" target="_blank" rel="noopener">vue-lazyload</a></li><li>引用本地资源 <code>require(&#39;xxx.png&#39;)</code></li><li><code>$el</code> 非dom操作时添加进行修改</li><li>vue内置组件<code>transition-group</code>：作为多个元素/组件的过渡效果，使用时需要一个动画名称<code>name=&quot;list&quot;</code>，默认渲染<code>&lt;span&gt;</code>，可以通过 <code>tag</code> 属性配置哪个元素应该被渲染。渲染成<code>ul</code>时要求<code>li</code>有<code>:key=&quot;item.id&quot;</code>。高度从50px变成0的效果：<blockquote><p>.list-enter-active, .list-leave-active{<br>&nbsp;&nbsp;&nbsp;&nbsp;transition: all 0.1s<br>}<br>.list-enter, .list-leave-to{<br>&nbsp;&nbsp;&nbsp;&nbsp;height: 0<br>}</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是我第一次学习vue时整理的一些简单的笔记。同时也是我建立这个个人博客的第一篇文章。借此分享也便以后查阅，欢迎纠正与指导。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="学习" scheme="https://linyong05.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="https://linyong05.github.io/tags/vue/"/>
    
      <category term="笔记" scheme="https://linyong05.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
